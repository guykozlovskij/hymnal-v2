(function(){"use strict";try{if(typeof document<"u"){var e=document.createElement("style");e.appendChild(document.createTextNode(".vue-toggles{display:flex;align-items:center;border-radius:9999px;overflow:hidden;transition:background-color ease .2s,width ease .2s,height ease .2s}.vue-toggles__dot{position:relative;display:flex;align-items:center;border-radius:9999px;box-shadow:0 1px 3px #0000001a,0 1px 2px #0000000f;transition:margin ease .2s}.vue-toggles__text{position:absolute;font-family:inherit;-webkit-user-select:none;user-select:none;white-space:nowrap}@media (prefers-reduced-motion){.vue-toggles,.vue-toggles *,.vue-toggles *:before,.vue-toggles *:after{animation:none!important;transition:none!important;transition-duration:none!important}}")),document.head.appendChild(e)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}})();
import { defineComponent as p, ref as v, watchEffect as x, computed as a, openBlock as h, createElementBlock as u, normalizeStyle as i, withKeys as n, withModifiers as s, createElementVNode as m, toDisplayString as y, createCommentVNode as k } from "vue";
const $ = ["aria-checked", "aria-readonly", "onKeyup"], b = /* @__PURE__ */ p({
  __name: "VueToggles",
  props: {
    modelValue: { type: Boolean, default: void 0 },
    value: { type: Boolean, default: void 0 },
    disabled: { type: Boolean },
    reverse: { type: Boolean },
    width: { default: 75 },
    height: { default: 25 },
    dotColor: { default: "#ffffff" },
    uncheckedBg: { default: "#939393" },
    checkedBg: { default: "#5850ec" },
    uncheckedTextColor: { default: "#ffffff" },
    checkedTextColor: { default: "#ffffff" },
    uncheckedText: { default: "" },
    checkedText: { default: "" },
    fontSize: { default: 12 },
    fontWeight: { default: "normal" }
  },
  emits: ["update:modelValue", "click"],
  setup(r, { emit: d }) {
    const e = r, l = v(e.value || e.modelValue);
    x(() => {
      e.value !== void 0 && e.modelValue !== void 0 && console.warn(
        'Avoid using both "v-model" and ":value" at the same time. Choose one for better predictability.'
      ), l.value = e.value || e.modelValue;
    });
    const c = a(() => ({
      width: `${e.width}px`,
      height: `${e.height}px`,
      background: l.value ? e.checkedBg : e.uncheckedBg,
      opacity: e.disabled ? "0.5" : "1",
      cursor: e.disabled ? "not-allowed" : "pointer"
    })), f = a(() => {
      const t = {
        background: e.dotColor,
        width: `${e.height - 8}px`,
        height: `${e.height - 8}px`,
        "min-width": `${e.height - 8}px`,
        "min-height": `${e.height - 8}px`,
        "margin-left": l.value ? `${e.width - (e.height - 3)}px` : "5px"
      };
      return l.value ? e.reverse ? t["margin-left"] = "5px" : t["margin-left"] = `${e.width - (e.height - 3)}px` : e.reverse ? t["margin-left"] = `${e.width - (e.height - 3)}px` : t["margin-left"] = "5px", t;
    }), g = a(() => {
      const t = {
        "font-weight": e.fontWeight,
        "font-size": `${e.fontSize}px`,
        color: l.value && !e.disabled ? e.checkedTextColor : e.uncheckedTextColor,
        right: l.value ? `${e.height - 3}px` : "auto",
        left: l.value ? "auto" : `${e.height - 3}px`
      };
      return l.value ? e.reverse ? (t.left = `${e.height - 3}px`, t.right = "auto") : (t.right = `${e.height - 3}px`, t.left = "auto") : e.reverse ? (t.right = `${e.height - 3}px`, t.left = "auto") : (t.left = `${e.height - 3}px`, t.right = "auto"), t;
    }), o = () => {
      e.disabled || (l.value = !l.value, d("update:modelValue", l.value), d("click"));
    };
    return (t, w) => (h(), u("span", {
      class: "vue-toggles",
      style: i(c.value),
      role: "switch",
      tabindex: "0",
      "aria-checked": l.value,
      "aria-readonly": t.disabled,
      onKeyup: [
        n(s(o, ["prevent"]), ["enter"]),
        n(s(o, ["prevent"]), ["space"])
      ],
      onClick: o
    }, [
      m("span", {
        "aria-hidden": "true",
        style: i(f.value),
        class: "vue-toggles__dot"
      }, [
        t.checkedText || t.uncheckedText ? (h(), u("span", {
          key: 0,
          class: "vue-toggles__text",
          style: i(g.value)
        }, y(l.value ? t.checkedText : t.uncheckedText), 5)) : k("", !0)
      ], 4)
    ], 44, $));
  }
});
export {
  b as VueToggles
};
